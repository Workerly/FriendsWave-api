# Generated by Django 3.2.10 on 2021-12-10 12:53

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_extensions.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Datation',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('deleted', models.BooleanField(default=False)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
            managers=[
                ('h_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('datation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='social.datation')),
                ('status', models.CharField(choices=[('A', 'ACCEPT'), ('D', 'DENIE')], max_length=1)),
            ],
            options={
                'verbose_name': 'friend',
                'verbose_name_plural': 'friends',
            },
            bases=('social.datation',),
            managers=[
                ('h_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('genre', models.CharField(choices=[('M', 'Masculin'), ('F', 'Feminin')], max_length=1)),
                ('phone_number', models.CharField(max_length=200)),
                ('address', models.CharField(blank=True, max_length=200)),
                ('is_verified', models.BooleanField(default=False)),
                ('updated_at', models.DateField(default=django.utils.timezone.now)),
                ('deleted', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['genre'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profil',
            fields=[
                ('datation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='social.datation')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='static/profile/%Y/%m/%d/')),
                ('pseudo', models.CharField(max_length=100)),
                ('state_profil', models.CharField(choices=[('A', 'Actif'), ('I', 'Inactive')], default='A', max_length=1)),
                ('follow', models.ManyToManyField(related_name='_social_profil_follow_+', related_query_name='social_profils', through='social.Friend', to='social.Profil')),
            ],
            options={
                'verbose_name': 'Profil',
                'verbose_name_plural': 'Profils',
                'ordering': ['created'],
            },
            bases=('social.datation',),
            managers=[
                ('h_objects', django.db.models.manager.Manager()),
            ],
        ),
    ]
